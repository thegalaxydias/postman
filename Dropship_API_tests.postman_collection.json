{
	"info": {
		"_postman_id": "4c4a0222-41b3-47f6-a31a-44f6bc08ee3a",
		"name": "Dropship_API_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36945080",
		"_collection_link": "https://dropship-qa.postman.co/workspace/Team-Workspace~8b16705c-70a0-4179-8bb2-bf21c1532ff4/collection/36945080-4c4a0222-41b3-47f6-a31a-44f6bc08ee3a?action=share&source=collection_link&creator=36945080"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "JWT token admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRFTOKEN",
								"value": "NbzQ2oKyZvGB4DxnXS2QNyIZfJ5O8h32ikEEgzRQUcNkgSivY0tIJvyIiXqYRb75",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{admin_email}}\",\r\n    \"password\":\"{{admin_pw}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/auth/token/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "oauth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Oauth_needed field is present in the response', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('oauth_needed');\r",
									"})\r",
									"\r",
									"pm.test('Oauth_needed field is a boolean value', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.oauth_needed).to.be.a('boolean');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domain\": \"test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/user/stores/check_oauth_needed/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"user",
								"stores",
								"check_oauth_needed",
								""
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin panel",
			"item": [
				{
					"name": "icons",
					"item": [
						{
							"name": "benefits drawbacks icons list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"count\");\r",
											"    pm.expect(jsonData).to.have.property(\"next\");\r",
											"    pm.expect(jsonData).to.have.property(\"previous\");\r",
											"    pm.expect(jsonData).to.have.property(\"results\");\r",
											"});\r",
											"\r",
											"pm.test(\"Count is a number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Results array is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.results).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Each result has the required properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.results.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"id\");\r",
											"        pm.expect(item).to.have.property(\"title\");\r",
											"        pm.expect(item).to.have.property(\"content\");\r",
											"        pm.expect(item).to.have.property(\"is_used\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/benefits-drawbacks-icons/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"benefits-drawbacks-icons",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "73609072",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "benefits drawbacks icons create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches response\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"qlaborumq minim\");\r",
											"    pm.expect(pm.response.text()).to.include(\"qincididunq\");\r",
											"    pm.expect(pm.response.text()).to.include(\"999\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 999,\r\n  \"title\": \"qlaborumq minim\",\r\n  \"content\": \"qincididunq\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/benefits-drawbacks-icons/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"benefits-drawbacks-icons",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "benefits drawbacks icons remove",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/benefits-drawbacks-icons/:id/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"benefits-drawbacks-icons",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "benefits drawbacks",
					"item": [
						{
							"name": "benefits drawbacks list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all required fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"count\");\r",
											"    pm.expect(jsonData).to.have.property(\"next\");\r",
											"    pm.expect(jsonData).to.have.property(\"previous\");\r",
											"    pm.expect(jsonData).to.have.property(\"results\");\r",
											"});\r",
											"\r",
											"pm.test(\"Count is a number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Results array is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.results).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Each result has the required properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.results.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"id\");\r",
											"        pm.expect(item).to.have.property(\"title\");\r",
											"        pm.expect(item).to.have.property(\"_type\");\r",
											"        pm.expect(item).to.have.property(\"icon\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/benefits-drawbacks/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"benefits-drawbacks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "benefits drawbacks create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches response\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uioqwerks\");\r",
											"    pm.expect(pm.response.text()).to.include(\"qwerafafj\");\r",
											"    pm.expect(pm.response.text()).to.include(\"5558850\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 5558850,\r\n    \"title\": \"uioqwerks\",\r\n    \"description\": \"qwerafafj\",\r\n    \"_type\": \"Drawbacks\",\r\n    \"icon\": {\r\n        \"id\": 4337,\r\n        \"title\": \"3dglassesusercircle\",\r\n        \"content\": \"<svg viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g stroke-linecap=\\\"round\\\" stroke-width=\\\"1.5\\\" stroke=\\\"#323232\\\" fill=\\\"none\\\" stroke-linejoin=\\\"round\\\"><path d=\\\"M14.71 20.58l-.77-3.08\\\"/><path d=\\\"M9.29 20.58l.77-3.08\\\"/><rect width=\\\"11\\\" height=\\\"5.5\\\" x=\\\"6.5\\\" y=\\\"9\\\" rx=\\\"1.5\\\"/><path d=\\\"M10.25 11.5l3.5 0\\\"/><path d=\\\"M7.83 9.02l-.01 0c.43-1.78 2.03-3.03 3.85-3.03h.62l-.01 0c1.82-.01 3.42 1.24 3.86 3.02\\\"/><path d=\\\"M15.95 14.5l-.01 0c-.27 2.18-2.26 3.73-4.44 3.47 -1.82-.23-3.25-1.66-3.48-3.48\\\"/><path d=\\\"M12 3a9 9 0 1 0 0 18 9 9 0 1 0 0-18Z\\\"/></g><path fill=\\\"none\\\" d=\\\"M0 0h24v24H0Z\\\"/></svg>\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/benefits-drawbacks/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"benefits-drawbacks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "benefits drawbacks remove",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/benefits-drawbacks/:id/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"benefits-drawbacks",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "5558850"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "portfolio",
					"item": [
						{
							"name": "portfolio list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Count is a number\", function () {\r",
											"    pm.expect(jsonData.count).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Next is a valid URL or null\", function () {\r",
											"    if (jsonData.next !== null) {\r",
											"        pm.expect(jsonData.next).to.be.a('string');\r",
											"        pm.expect(jsonData.next).to.match(/^https?:\\/\\/.+/);\r",
											"    } else {\r",
											"        pm.expect(jsonData.next).to.be.null;\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Results is an array\", function () {\r",
											"    pm.expect(jsonData.results).to.be.an('array');\r",
											"});\r",
											"\r",
											"jsonData.results.forEach(function (result, index) {\r",
											"    pm.test(\"Result item \" + (index + 1) + \" has valid fields\", function () {\r",
											"        pm.expect(result).to.have.property('year').that.is.a('number');\r",
											"        pm.expect(result).to.have.property('month').that.is.a('string');\r",
											"        pm.expect(result).to.have.property('categories').that.is.an('array');\r",
											"\r",
											"        result.categories.forEach(function (category) {\r",
											"            pm.expect(category).to.have.property('name').that.is.a('string');\r",
											"            pm.expect(category).to.have.property('title').that.is.a('string');\r",
											"            pm.expect(category).to.have.property('status').that.is.a('boolean');\r",
											"            pm.expect(category).to.have.property('drops').that.is.an('array');\r",
											"\r",
											"            category.drops.forEach(function (drop) {\r",
											"                pm.expect(drop).to.have.property('drop_id').that.is.a('string');\r",
											"                pm.expect(drop).to.have.property('drop_date').that.is.a('string');\r",
											"                pm.expect(drop).to.have.property('week').that.is.a('number');\r",
											"                pm.expect(drop).to.have.property('year').that.is.a('number');\r",
											"                pm.expect(drop).to.have.property('month').that.is.a('string');\r",
											"                pm.expect(drop).to.have.property('drop_status').that.is.a('string');\r",
											"                pm.expect(drop).to.have.property('product_count').that.is.a('number');\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/portfolio/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"portfolio",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "timer",
					"item": [
						{
							"name": "timer list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/timer/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"timer",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "competitors",
					"item": [
						{
							"name": "competitors count list",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/competitors_count/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"competitors_count",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "user role list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"jsonData.forEach(function (item, index) {\r",
											"    pm.test(\"Role \" + (index + 1) + \" has valid fields\", function () {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('title').that.is.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"var expectedItems = [\r",
											"    { id: 1, title: \"User\" },\r",
											"    { id: 2, title: \"Admin\" },\r",
											"    { id: 3, title: \"Manager\" },\r",
											"    { id: 4, title: \"Free Access\" },\r",
											"    { id: 5, title: \"Shopify Tester\" }\r",
											"];\r",
											"\r",
											"pm.test(\"All expected roles are present\", function () {\r",
											"    expectedItems.forEach(function (expectedItem) {\r",
											"        var match = jsonData.find(function (item) {\r",
											"            return item.id === expectedItem.id && item.title === expectedItem.title;\r",
											"        });\r",
											"        pm.expect(match).to.be.an('object');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/users/get_roles/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"users",
										"get_roles",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "support panel",
					"item": [
						{
							"name": "users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "user search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response contains count, next, previous, and results\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"    pm.expect(pm.response.json()).to.have.property('next');\r",
											"    pm.expect(pm.response.json()).to.have.property('previous');\r",
											"    pm.expect(pm.response.json()).to.have.property('results');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Count is a number\", function () {\r",
											"    pm.expect(pm.response.json().count).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Next is either a string or null\", function () {\r",
											"    const nextLink = pm.response.json().next;\r",
											"    pm.expect(nextLink === null || typeof nextLink === 'string').to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Results is an array of objects\", function () {\r",
											"    const results = pm.response.json().results;\r",
											"    pm.expect(results).to.be.an('array');\r",
											"    pm.expect(results[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each user object contains valid fields\", function () {\r",
											"    const results = pm.response.json().results;\r",
											"\r",
											"    results.forEach(function (result) {\r",
											"        pm.expect(result).to.have.property('id').that.is.a('number');\r",
											"        pm.expect(result).to.have.property('first_name').that.is.a('string');\r",
											"        pm.expect(result).to.have.property('last_name').that.is.a('string');\r",
											"        pm.expect(result).to.have.property('email').that.is.a('string');\r",
											"        pm.expect(result).to.have.property('created').that.is.a('string');\r",
											"        pm.expect(result).to.have.property('onboarding_finished').that.is.a('boolean');\r",
											"        pm.expect(result).to.have.property('email_confirmed').that.is.a('boolean');\r",
											"        pm.expect(result).to.have.property('payment_provider').that.is.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Payment provider is either 'stripe' or 'chargebee'\", function () {\r",
											"    const results = pm.response.json().results;\r",
											"\r",
											"    results.forEach(function (result) {\r",
											"        pm.expect(result.payment_provider).to.be.oneOf(['stripe', 'chargebee']);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Email confirmed and onboarding finished are booleans\", function () {\r",
											"    const results = pm.response.json().results;\r",
											"\r",
											"    results.forEach(function (result) {\r",
											"        pm.expect(result.email_confirmed).to.be.a('boolean');\r",
											"        pm.expect(result.onboarding_finished).to.be.a('boolean');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/?email=kyrylo_d@dataforest.ai&fuzzy=true",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										""
									],
									"query": [
										{
											"key": "email",
											"value": "kyrylo_d@dataforest.ai"
										},
										{
											"key": "fuzzy",
											"value": "true"
										},
										{
											"key": "card_last_4",
											"value": "4242",
											"disabled": true
										},
										{
											"key": "invoice_id",
											"value": "99189004-0003",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "payment history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response contains count, next, previous, and results\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('count');\r",
											"    pm.expect(jsonData).to.have.property('next');\r",
											"    pm.expect(jsonData).to.have.property('previous');\r",
											"    pm.expect(jsonData).to.have.property('results');\r",
											"});\r",
											"\r",
											"pm.test(\"Count is a number\", function () {\r",
											"    pm.expect(pm.response.json().count).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Results is an array and contains valid objects\", function () {\r",
											"    const results = pm.response.json().results;\r",
											"    pm.expect(results).to.be.an('array');\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"    pm.expect(results[0]).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Result object contains valid fields\", function () {\r",
											"    const result = pm.response.json().results[0];\r",
											"\r",
											"    pm.expect(result).to.have.property('total').that.is.a('number');\r",
											"    pm.expect(result).to.have.property('status').that.is.an('object');\r",
											"    pm.expect(result.status).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(result.status).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(result).to.have.property('plan').that.is.a('string');\r",
											"    pm.expect(result).to.have.property('issued_date').that.is.a('string');\r",
											"    pm.expect(result).to.have.property('payment_method').that.is.an('object');\r",
											"    pm.expect(result.payment_method).to.have.property('last_4').that.is.a('string');\r",
											"    pm.expect(result.payment_method).to.have.property('card_type').that.is.a('string');\r",
											"    pm.expect(result).to.have.property('invoice_id').that.is.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Issued date is in YYYY-MM-DD format\", function () {\r",
											"    const issuedDate = pm.response.json().results[0].issued_date;\r",
											"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
											"    pm.expect(issuedDate).to.match(dateRegex);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment method contains valid card details\", function () {\r",
											"    const paymentMethod = pm.response.json().results[0].payment_method;\r",
											"\r",
											"    pm.expect(paymentMethod).to.have.property('last_4').that.is.a('string').with.lengthOf(4);\r",
											"    pm.expect(paymentMethod).to.have.property('card_type').that.is.a('string');\r",
											"    pm.expect(['visa', 'mastercard', 'amex']).to.include(paymentMethod.card_type.toLowerCase());\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Invoice ID is a valid string\", function () {\r",
											"    const invoiceId = pm.response.json().results[0].invoice_id;\r",
											"    pm.expect(invoiceId).to.be.a('string').and.not.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/payments/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"payments",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "change email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Email confirmation\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Confirmation email sent to the new email.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"new_email\": \"kyrylo_d+999@dataforest.ai\",       \r\n  \"verify_email\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/change-email/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"change-email",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deactivate subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has status, message, and subscription\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status').that.equals(\"Success\");\r",
											"    pm.expect(jsonData).to.have.property('message').that.is.a('string');\r",
											"    pm.expect(jsonData).to.have.property('subscription').that.is.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Subscription ID\", function () {\r",
											"    const subscription = pm.response.json().subscription;\r",
											"    pm.expect(subscription).to.have.property('id').that.is.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Category object is valid\", function () {\r",
											"    const category = pm.response.json().subscription.category;\r",
											"    pm.expect(category).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(category).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(category).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(category).to.have.property('status').that.is.a('boolean');\r",
											"});\r",
											"\r",
											"pm.test(\"Category timer is valid\", function () {\r",
											"    const categoryTimer = pm.response.json().subscription.category.category_timer;\r",
											"    pm.expect(categoryTimer).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(categoryTimer).to.have.property('end').that.is.a('string');\r",
											"    pm.expect(categoryTimer).to.have.property('drop_period').that.is.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Plan object is valid\", function () {\r",
											"    const plan = pm.response.json().subscription.plan;\r",
											"    pm.expect(plan).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(plan).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(plan).to.have.property('price').that.is.a('number');\r",
											"    pm.expect(plan).to.have.property('is_trial').that.is.a('boolean');\r",
											"    \r",
											"    const priceType = plan.price_type;\r",
											"    pm.expect(priceType).to.have.property('id').that.is.a('string');\r",
											"    pm.expect(priceType).to.have.property('value').that.equals(\"Monthly\");\r",
											"    \r",
											"    const subPlan = plan.plan;\r",
											"    pm.expect(subPlan).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(subPlan).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(subPlan).to.have.property('amount_products_per_week').that.is.a('number');\r",
											"    pm.expect(subPlan).to.have.property('is_trial').that.is.a('boolean');\r",
											"    pm.expect(subPlan).to.have.property('label').that.is.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Subscription is active and deactivation scheduled\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const subscription = jsonData.subscription;\r",
											"    pm.expect(subscription).to.have.property('active').that.equals(true);\r",
											"    pm.expect(jsonData.message).to.include(\"Scheduled subscription deactivation at the end of billing period\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Payment details\", function () {\r",
											"    const subscription = pm.response.json().subscription;\r",
											"    pm.expect(subscription).to.have.property('price').that.equals(0);\r",
											"    pm.expect(subscription).to.have.property('next_payment_amount').that.equals(0);\r",
											"    pm.expect(subscription).to.have.property('payment_status').that.is.an('object');\r",
											"    \r",
											"    const paymentStatus = subscription.payment_status;\r",
											"    pm.expect(paymentStatus).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(paymentStatus).to.have.property('name').that.equals(\"Trial\");\r",
											"});\r",
											"\r",
											"pm.test(\"Plan deactivation is scheduled\", function () {\r",
											"    const subscription = pm.response.json().subscription;\r",
											"    pm.expect(subscription.payment_status.name).to.equal(\"Trial\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"force\": false,\r\n  \"refund_type\": \"prorate\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/deactivate-subscription/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"deactivate-subscription",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deactivate user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"User deactivated\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has been deactivated successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/deactivate-user/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"deactivate-user",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "activate subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/activate-subscription/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"activate-subscription",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "activate user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"User activated\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"has been activated successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/activate-user/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"activate-user",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "sync subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has status, message, and subscription\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status').that.equals(\"Success\");\r",
											"    pm.expect(jsonData).to.have.property('message').that.is.a('string');\r",
											"    pm.expect(jsonData).to.have.property('subscription').that.is.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Subscription ID is valid\", function () {\r",
											"    const subscription = pm.response.json().subscription;\r",
											"    pm.expect(subscription).to.have.property('id').that.is.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Category object is valid\", function () {\r",
											"    const category = pm.response.json().subscription.category;\r",
											"    pm.expect(category).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(category).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(category).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(category).to.have.property('status').that.is.a('boolean');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Category timer is valid\", function () {\r",
											"    const categoryTimer = pm.response.json().subscription.category.category_timer;\r",
											"    pm.expect(categoryTimer).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(categoryTimer).to.have.property('end').that.is.a('string');\r",
											"    pm.expect(categoryTimer).to.have.property('drop_period').that.is.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Plan object is valid\", function () {\r",
											"    const plan = pm.response.json().subscription.plan;\r",
											"    pm.expect(plan).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(plan).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(plan).to.have.property('price').that.is.a('number');\r",
											"    pm.expect(plan).to.have.property('is_trial').that.is.a('boolean');\r",
											"    \r",
											"    const planType = plan.price_type;\r",
											"    pm.expect(planType).to.have.property('id').that.is.a('string');\r",
											"    pm.expect(planType).to.have.property('value').that.equals(\"Monthly\");\r",
											"    \r",
											"    const subPlan = plan.plan;\r",
											"    pm.expect(subPlan).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(subPlan).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(subPlan).to.have.property('amount_products_per_week').that.is.a('number');\r",
											"    pm.expect(subPlan).to.have.property('is_trial').that.is.a('boolean');\r",
											"    pm.expect(subPlan).to.have.property('label').that.is.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Payment details are valid\", function () {\r",
											"    const subscription = pm.response.json().subscription;\r",
											"    pm.expect(subscription).to.have.property('price').that.is.a('number');\r",
											"    pm.expect(subscription).to.have.property('next_payment_amount').that.is.a('number');\r",
											"    pm.expect(subscription).to.have.property('next_payment_date').that.is.a('string');\r",
											"    pm.expect(subscription).to.have.property('payment_status').that.is.an('object');\r",
											"    \r",
											"    const paymentStatus = subscription.payment_status;\r",
											"    pm.expect(paymentStatus).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(paymentStatus).to.have.property('name').that.equals(\"Paid\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Subscription dates are valid\", function () {\r",
											"    const subscription = pm.response.json().subscription;\r",
											"    pm.expect(subscription).to.have.property('start_date').that.is.a('string');\r",
											"    pm.expect(subscription).to.have.property('next_payment_date').that.is.a('string');\r",
											"    pm.expect(subscription).to.have.property('trial_ends_at').to.be.null;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Subscription is active\", function () {\r",
											"    const subscription = pm.response.json().subscription;\r",
											"    pm.expect(subscription).to.have.property('active').that.is.a('boolean').and.equals(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/sync-subscription/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"sync-subscription",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id_3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "log list",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\" : {{user_id}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/support-log-entries/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"support-log-entries",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "log update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"note\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/support-log-entries/8e479ab7-7d7a-4f75-b7ac-0bacf2e7b014/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"support-log-entries",
										"8e479ab7-7d7a-4f75-b7ac-0bacf2e7b014",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update subscription duration",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"additional_days\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/extend-subscription-duration/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"extend-subscription-duration",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "log in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has refresh, access, and user fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('refresh');\r",
											"    pm.expect(jsonData).to.have.property('access');\r",
											"    pm.expect(jsonData).to.have.property('user');\r",
											"});\r",
											"\r",
											"pm.test(\"Refresh token is a valid JWT\", function () {\r",
											"    const refreshToken = pm.response.json().refresh;\r",
											"    const jwtParts = refreshToken.split('.');\r",
											"    pm.expect(jwtParts.length).to.equal(3); \r",
											"\r",
											"\r",
											"pm.test(\"Access token is a valid JWT\", function () {\r",
											"    const accessToken = pm.response.json().access;\r",
											"    const jwtParts = accessToken.split('.');\r",
											"    pm.expect(jwtParts.length).to.equal(3); \r",
											"});\r",
											"\r",
											"pm.test(\"User object contains expected fields\", function () {\r",
											"    const user = pm.response.json().user;\r",
											"    pm.expect(user).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(user).to.have.property('email').that.is.a('string');\r",
											"    pm.expect(user).to.have.property('first_name').that.is.a('string');\r",
											"    pm.expect(user).to.have.property('last_name').that.is.a('string');\r",
											"    pm.expect(user).to.have.property('language').that.is.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Billing info contains valid country and phone code\", function () {\r",
											"    const billingInfo = pm.response.json().user.billing_info;\r",
											"    pm.expect(billingInfo).to.have.property('country').that.is.an('object');\r",
											"    pm.expect(billingInfo).to.have.property('phone_code').that.is.an('object');\r",
											"\r",
											"    pm.expect(billingInfo.country).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(billingInfo.phone_code).to.have.property('code').that.is.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Card details are valid\", function () {\r",
											"    const card = pm.response.json().user.card;\r",
											"    pm.expect(card).to.have.property('last_4').that.is.a('string').with.lengthOf(4);\r",
											"    pm.expect(card).to.have.property('card_type').that.is.a('string');\r",
											"    pm.expect(card).to.have.property('expire_month').that.is.a('string');\r",
											"    pm.expect(card).to.have.property('expire_year').that.is.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"User is using Stripe\", function () {\r",
											"    const user = pm.response.json().user;\r",
											"    pm.expect(user.use_stripe).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"User role is 'User'\", function () {\r",
											"    const role = pm.response.json().user.role;\r",
											"    pm.expect(role).to.have.property('name').that.equals(\"User\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Stripe customer ID is present and valid\", function () {\r",
											"    const user = pm.response.json().user;\r",
											"    pm.expect(user).to.have.property('stripe_customer_id').that.is.a('string').and.not.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/admin-panel/support-panel/users/:user_id/log-in-as/",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"admin-panel",
										"support-panel",
										"users",
										":user_id",
										"log-in-as",
										""
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id_3}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "user/account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Billing info object is present in the response', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('billing_info');\r",
									"})\r",
									"\r",
									"pm.test('Email is in a valid email format', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, 'Email format is not valid');\r",
									"})\r",
									"\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Field</th>\r",
									"        <th>Value</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>id</td>\r",
									"        <td>{{response.id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>email</td>\r",
									"        <td>{{response.email}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>first_name</td>\r",
									"        <td>{{response.first_name}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>last_name</td>\r",
									"        <td>{{response.last_name}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>language</td>\r",
									"        <td>{{response.language}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>avatar</td>\r",
									"        <td>{{response.avatar}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>billing_info</td>\r",
									"        <td>{{response.billing_info}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>company</td>\r",
									"        <td>{{response.company}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>accounts</td>\r",
									"        <td>{{response.accounts}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>card</td>\r",
									"        <td>{{response.card}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>subscriptions</td>\r",
									"        <td>{{response.subscriptions}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>role</td>\r",
									"        <td>{{response.role}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>chargebee_customer_id</td>\r",
									"        <td>{{response.chargebee_customer_id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>stripe_customer_id</td>\r",
									"        <td>{{response.stripe_customer_id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>external_subscription_id</td>\r",
									"        <td>{{response.external_subscription_id}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>onboarding_finished</td>\r",
									"        <td>{{response.onboarding_finished}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>email_added</td>\r",
									"        <td>{{response.email_added}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>created</td>\r",
									"        <td>{{response.created}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>password_created</td>\r",
									"        <td>{{response.password_created}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>trial_used</td>\r",
									"        <td>{{response.trial_used}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>subscription_was_canceled</td>\r",
									"        <td>{{response.subscription_was_canceled}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>show_intercom_tutorial</td>\r",
									"        <td>{{response.show_intercom_tutorial}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>show_ai_funnels_offer</td>\r",
									"        <td>{{response.show_ai_funnels_offer}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>need_block_pages</td>\r",
									"        <td>{{response.need_block_pages}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>email_confirmed</td>\r",
									"        <td>{{response.email_confirmed}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>use_stripe</td>\r",
									"        <td>{{response.use_stripe}}</td>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>raw_data_access</td>\r",
									"        <td>{{response.raw_data_access}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() }\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/user/account/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"user",
								"account",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "change email",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"kyrylo_d@dataforest.ai\",\r\n  \"new_email\": \"kyrylo_d+99@dataforest.ai\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/user/change-email/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"user",
								"change-email",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "onboarding",
			"item": [
				{
					"name": "plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('amount_products_per_week').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('status').that.is.a('boolean');\r",
									"        pm.expect(item).to.have.property('is_trial').that.is.a('boolean');\r",
									"        pm.expect(item).to.have.property('prices').that.is.an('object');\r",
									"        pm.expect(item).to.have.property('limits').that.is.an('array');\r",
									"        pm.expect(item).to.have.property('label').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the prices object contains yearly and monthly sub-objects with specific properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(plan) {\r",
									"        pm.expect(plan.prices.yearly).to.include.all.keys('id', 'price_type', 'name', 'price', 'is_trial', 'chargebee_id', 'stripe_id');\r",
									"        pm.expect(plan.prices.monthly).to.include.all.keys('id', 'price_type', 'name', 'price', 'is_trial', 'chargebee_id', 'stripe_id');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limits array contains all required properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.forEach(function(plan) {\r",
									"        plan.limits.forEach(function(limit) {\r",
									"            pm.expect(limit).to.have.property('id');\r",
									"            pm.expect(limit).to.have.property('limit_type');\r",
									"            pm.expect(limit).to.have.property('limit_unit');\r",
									"            pm.expect(limit).to.have.property('rate_unit');\r",
									"            pm.expect(limit).to.have.property('scope');\r",
									"            pm.expect(limit).to.have.property('tooltip');\r",
									"            pm.expect(limit).to.have.property('value');\r",
									"            pm.expect(limit).to.have.property('position');\r",
									"            pm.expect(limit).to.have.property('rate_value');\r",
									"            pm.expect(limit).to.have.property('active');\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/onboarding/plan/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"onboarding",
								"plan",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All objects have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('category_timer');",
									"        pm.expect(item).to.have.property('title');",
									"        pm.expect(item).to.have.property('description');",
									"        pm.expect(item).to.have.property('status');",
									"        pm.expect(item).to.have.property('prices');",
									"    });",
									"});",
									"",
									"pm.test(\"Category timers are valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function(item) {",
									"        if (item.category_timer) {",
									"            pm.expect(item.category_timer).to.have.property('id');",
									"            pm.expect(item.category_timer).to.have.property('end');",
									"            pm.expect(item.category_timer).to.have.property('drop_period');",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Prices are valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function(item) {",
									"        if (item.prices.yearly) {",
									"            pm.expect(item.prices.yearly).to.have.property('id');",
									"            pm.expect(item.prices.yearly).to.have.property('price_type');",
									"            pm.expect(item.prices.yearly).to.have.property('name');",
									"            pm.expect(item.prices.yearly).to.have.property('price');",
									"            pm.expect(item.prices.yearly).to.have.property('chargebee_id');",
									"        }",
									"        if (item.prices.monthly) {",
									"            pm.expect(item.prices.monthly).to.have.property('id');",
									"            pm.expect(item.prices.monthly).to.have.property('price_type');",
									"            pm.expect(item.prices.monthly).to.have.property('name');",
									"            pm.expect(item.prices.monthly).to.have.property('price');",
									"            pm.expect(item.prices.monthly).to.have.property('chargebee_id');",
									"        }",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/onboarding/category/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"onboarding",
								"category",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all necessary fields with correct data types\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property('id').that.is.a('string').and.to.not.be.empty;\r",
									"    pm.expect(jsonData).to.have.property('type').that.is.a('string').and.to.not.be.empty;\r",
									"    pm.expect(jsonData).to.have.property('value').that.is.a('number').and.to.be.within(0, 100);\r",
									"    pm.expect(jsonData).to.have.property('duration_type').that.is.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Type is either 'percent' or 'fixed'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.be.oneOf(['percent', 'fixed']);\r",
									"});\r",
									"\r",
									"pm.test(\"Duration type is either 'forever', 'limited', or 'recurring'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.duration_type).to.be.oneOf(['forever', 'limited', 'recurring']);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/discount/check?code=chrunkeyTest",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"discount",
								"check"
							],
							"query": [
								{
									"key": "code",
									"value": "chrunkeyTest"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ad_spot",
			"item": [
				{
					"name": "suggestion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"All objects have necessary fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('url');\r",
									"        pm.expect(item).to.have.property('ad_count');\r",
									"        pm.expect(item).to.have.property('domain');\r",
									"        pm.expect(item).to.have.property('logo');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"IDs are numbers\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.id).to.be.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"URLs are valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.url).to.match(/^https?:\\/\\/(www\\.)?[a-zA-Z0-9-]+(\\.[a-zA-Z]{2,})+(\\/.*)?$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ad_count is a non-negative integer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.ad_count).to.be.a('number');\r",
									"        pm.expect(item.ad_count).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Domain is a non-empty string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.domain).to.be.a('string');\r",
									"        pm.expect(item.domain).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"value\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_spot/search/suggestion/page_name/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_spot",
								"search",
								"suggestion",
								"page_name",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'languages' array\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('languages');\r",
									"    pm.expect(jsonData.languages).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"All objects in 'languages' array have necessary fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.languages.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('value');\r",
									"        pm.expect(item).to.have.property('count');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"IDs and values are non-empty strings\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.languages.forEach(function(item) {\r",
									"        pm.expect(item.id).to.be.a('string');\r",
									"        pm.expect(item.id).to.not.be.empty;\r",
									"        pm.expect(item.value).to.be.a('string');\r",
									"        pm.expect(item.value).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Counts are non-negative integers\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.languages.forEach(function(item) {\r",
									"        pm.expect(item.count).to.be.a('number');\r",
									"        pm.expect(item.count).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Total count of languages\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.languages.length).to.be.at.least(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/ad_spot/choice_filters/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_spot",
								"choice_filters",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "search/default",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_spot/search/default",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_spot",
								"search",
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "search/domain name",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"value\": \"test\",\r\n  \"size\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_spot/search/suggestion/domain_name/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_spot",
								"search",
								"suggestion",
								"domain_name",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "search/page name",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"value\": \"test\",\r\n  \"size\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_spot/search/suggestion/page_name/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_spot",
								"search",
								"suggestion",
								"page_name",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ad library",
			"item": [
				{
					"name": "default search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/ad_library/ads/search/default/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_library",
								"ads",
								"search",
								"default",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "choice filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'languages' key\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"languages\");\r",
									"    pm.expect(jsonData.languages).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each language object contains 'id' and 'value'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    jsonData.languages.forEach((language) => {\r",
									"        pm.expect(language).to.have.keys([\"id\", \"value\"]);\r",
									"        pm.expect(language.id).to.be.a(\"string\");\r",
									"        pm.expect(language.value).to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Language IDs are unique\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let ids = jsonData.languages.map((language) => language.id);\r",
									"    let uniqueIds = [...new Set(ids)];\r",
									"    pm.expect(ids.length).to.eql(uniqueIds.length);\r",
									"});\r",
									"\r",
									"pm.test(\"Check specific languages exist\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let languageIds = jsonData.languages.map((language) => language.id);\r",
									"    pm.expect(languageIds).to.include(\"en\");\r",
									"    pm.expect(languageIds).to.include(\"ar\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"test\",\r\n  \"value\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_library/choice_filters/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_library",
								"choice_filters",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "filter preset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"if (pm.response.text()){\r",
									"    const response = pm.response.json()\r",
									"    if (response.refresh != null){\r",
									"        pm.collectionVariables.set(\"preset_id\", response.id);\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomCompanyName}}\",\r\n  \"value\": \"{{$randomLoremText}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_library/filter_presets/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_library",
								"filter_presets",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "filter preset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomAbbreviation}}\",\r\n  \"value\": \"{{$randomLoremText}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_library/filter_presets/?q={{preset_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_library",
								"filter_presets",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "{{preset_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "filter preset",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_library/filter_presets/?id={{preset_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_library",
								"filter_presets",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{preset_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "filter preset",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomLoremText}}\",\r\n  \"value\": \"{{$randomLoremText}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_library/filter_presets/?id={{preset_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_library",
								"filter_presets",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{preset_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "filter preset",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomLoremText}}\",\r\n  \"value\": \"{{$randomLoremText}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/ad_library/filter_presets/?id={{preset_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ad_library",
								"filter_presets",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{preset_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dashboard",
			"item": [
				{
					"name": "dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the course object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.course).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.course.id).to.be.a('string');\r",
									"    pm.expect(responseData.course.position).to.be.a('number');\r",
									"    pm.expect(responseData.course.lessons_count).to.be.a('number');\r",
									"    pm.expect(responseData.course.title).to.be.a('string');\r",
									"    pm.expect(responseData.course.description).to.be.a('string');\r",
									"    pm.expect(responseData.course.thumbnail).to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Course ID is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.course.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Course ID should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Position is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.course).to.be.an('object');\r",
									"  pm.expect(responseData.course.position).to.be.a('number').and.to.satisfy((pos) => pos >= 0, \"Position must be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Lessons count is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.course.lessons_count).to.be.a('number');\r",
									"  pm.expect(responseData.course.lessons_count).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.course.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Description is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.course.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/dashboard",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"dashboard"
							]
						},
						"description": "\nThe endpoint retrieves the dashboard data for the user.\n\nThe response of the request can be documented as a JSON schema:\n\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"course\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\"type\": \"string\"},\n                \"position\": {\"type\": \"integer\"},\n                \"lessons_count\": {\"type\": \"integer\"},\n                \"title\": {\"type\": \"string\"},\n                \"description\": {\"type\": \"string\"},\n                \"thumbnail\": {\"type\": \"string\"}\n            }\n        },\n        \"limits\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"stores\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"used\": {\"type\": \"integer\"},\n                        \"allowed\": {\"type\": [\"integer\", \"null\"]}\n                    }\n                },\n                \"products\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"used\": {\"type\": \"integer\"},\n                        \"allowed\": {\"type\": [\"integer\", \"null\"]}\n                    }\n                }\n            }\n        },\n        \"ai_stores_count\": {\"type\": \"integer\"}\n    }\n}\n```\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "product database",
			"item": [
				{
					"name": "filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Validate store_currency object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.store_currency).to.exist.and.to.be.an('array');",
									"  responseData.store_currency.forEach(function(currency) {",
									"    pm.expect(currency).to.be.an('object');",
									"    pm.expect(currency.id).to.be.a('string');",
									"    pm.expect(currency.code).to.be.a('string');",
									"    pm.expect(currency.name).to.be.a('string');",
									"    pm.expect(currency.flag).to.be.a('string');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Validate the domain_tld object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.domain_tld).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
									"    responseData.domain_tld.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.id).to.exist.and.to.be.a('string');",
									"        pm.expect(item.value).to.exist.and.to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Categories array is present and contains expected number of elements\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.categories).to.exist;",
									"  pm.expect(responseData.categories).to.be.an('array');",
									"  pm.expect(responseData.categories).to.have.lengthOf(21);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/product_database/choice_filters/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"product_database",
								"choice_filters",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "competitor/search",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/product_database/competitors/search/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"product_database",
								"competitors",
								"search",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "sales tracker",
			"item": [
				{
					"name": "sales tracking product list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/sales_tracker/products/?page=1&page_size=100",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"sales_tracker",
								"products",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sales tracking stores list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/sales_tracker/stores/?page=1&page_size=50",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"sales_tracker",
								"stores",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sales tracker top products filters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/sales_tracker/top_products/filters/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"sales_tracker",
								"top_products",
								"filters",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "stores",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/sales_tracker/stores",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"sales_tracker",
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "product/download report",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"min\": \"2024-02-06\",\r\n  \"max\": \"2025-02-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/sales_tracker/products/1/download_report/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"sales_tracker",
								"products",
								"1",
								"download_report",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "store/download report",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"min\": \"2024-02-06\",\r\n  \"max\": \"2025-02-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/sales_tracker/products/1/download_report/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"sales_tracker",
								"products",
								"1",
								"download_report",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "sales tracker v2",
			"item": [
				{
					"name": "popular products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has count, next, previous, and results\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('count').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('next').that.satisfies(url => url === null || typeof url === 'string');\r",
									"    pm.expect(jsonData).to.have.property('previous').that.satisfies(url => url === null || typeof url === 'string');\r",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Results array contains valid objects\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result).to.have.property('product_id').that.is.a('number');\r",
									"        pm.expect(result).to.have.property('store').that.is.an('object');\r",
									"        pm.expect(result).to.have.property('title').that.satisfies(title => title === null || typeof title === 'string');\r",
									"        pm.expect(result).to.have.property('main_image').that.satisfies(image => image === null || typeof image === 'string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Store object contains valid fields\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        const store = result.store;\r",
									"        pm.expect(store).to.have.property('custom_domain').that.is.a('string');\r",
									"        pm.expect(store).to.have.property('internal_shop_id').that.is.a('number');\r",
									"        pm.expect(store).to.have.property('favicon').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Pagination URLs are valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const urlRegex = /^(https?:\\/\\/[^\\s$.?#].[^\\s]*)?$/; \r",
									"\r",
									"    if (jsonData.next) {\r",
									"        pm.expect(jsonData.next).to.match(urlRegex);\r",
									"    }\r",
									"    if (jsonData.previous) {\r",
									"        pm.expect(jsonData.previous).to.match(urlRegex);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"At least one product has valid title and main_image\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"    const validProducts = results.filter(result => result.title !== null && result.main_image !== null);\r",
									"\r",
									"    pm.expect(validProducts.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Product IDs are unique\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"    const productIds = results.map(result => result.product_id);\r",
									"\r",
									"    const uniqueProductIds = new Set(productIds);\r",
									"    pm.expect(uniqueProductIds.size).to.equal(productIds.length);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/v2/sales_tracker/popular/products/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"v2",
								"sales_tracker",
								"popular",
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "popular stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains count, next, previous, and results\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('count').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('next').that.satisfies(url => url === null || typeof url === 'string');\r",
									"    pm.expect(jsonData).to.have.property('previous').that.satisfies(url => url === null || typeof url === 'string');\r",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Results array contains valid objects\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result).to.have.property('custom_domain').that.is.a('string');\r",
									"        pm.expect(result).to.have.property('internal_shop_id').that.is.a('number');\r",
									"        pm.expect(result).to.have.property('favicon').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Favicon is either empty or a valid URL\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"    const urlRegex = /^(https?:\\/\\/[^\\s$.?#].[^\\s]*)?$/;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        const favicon = result.favicon;\r",
									"        const isEmpty = favicon === \"\";\r",
									"        const isUrl = urlRegex.test(favicon);\r",
									"\r",
									"        pm.expect(isEmpty || isUrl).to.be.true;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Count matches the number of results\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results.length).to.equal(jsonData.count);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Internal shop IDs are unique\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"    const shopIds = results.map(result => result.internal_shop_id);\r",
									"\r",
									"    const uniqueShopIds = new Set(shopIds);\r",
									"    pm.expect(uniqueShopIds.size).to.equal(shopIds.length);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Custom domain is a valid string\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result.custom_domain).to.match(/^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/v2/sales_tracker/popular/stores/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"v2",
								"sales_tracker",
								"popular",
								"stores",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "store competitors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains count and results\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('count').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Count matches the number of results\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results.length).to.be.at.most(jsonData.count);\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has valid properties\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(result).to.have.property('handle').that.is.a('string').and.not.empty;\r",
									"        pm.expect(result).to.have.property('title').that.is.a('string').and.not.empty;\r",
									"        pm.expect(result).to.have.property('created_at').that.is.a('string');\r",
									"        pm.expect(result).to.have.property('images').that.is.a('number').and.at.least(0);\r",
									"        pm.expect(result).to.have.property('is_tracked').that.is.a('boolean');\r",
									"        pm.expect(result).to.have.property('main_image').that.is.a('string').and.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"        pm.expect(result).to.have.property('variants').that.is.a('number').and.at.least(0);\r",
									"        pm.expect(result).to.have.property('original_price').that.is.a('number').and.at.least(0);\r",
									"        pm.expect(result).to.have.property('usd_price').that.is.a('number').and.at.least(0);\r",
									"        pm.expect(result).to.have.property('product_type').that.is.a('string').and.not.empty;\r",
									"        pm.expect(result).to.have.property('category').that.is.a('number');\r",
									"        pm.expect(result).to.have.property('quick_search').that.is.an('array');\r",
									"\r",
									"     \r",
									"        pm.expect(result).to.have.property('store').that.is.an('object');\r",
									"        const store = result.store;\r",
									"        pm.expect(store).to.have.property('internal_shop_id').that.is.a('number');\r",
									"        pm.expect(store).to.have.property('created_at').that.is.a('string');\r",
									"        pm.expect(store).to.have.property('products_count').that.is.a('number').and.at.least(0);\r",
									"        pm.expect(store).to.have.property('favicon').that.is.a('string').and.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"        pm.expect(store).to.have.property('custom_domain').that.is.a('string').and.not.empty;\r",
									"        pm.expect(store).to.have.property('currency').that.is.a('string').and.not.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"USD price range is consistent\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result).to.have.property('usd_price_min').that.is.a('number');\r",
									"        pm.expect(result).to.have.property('usd_price_max').that.is.a('number');\r",
									"        pm.expect(result.usd_price_min).to.be.at.most(result.usd_price_max);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Product IDs are unique\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"    const ids = results.map(result => result.id);\r",
									"\r",
									"    const uniqueIds = new Set(ids);\r",
									"    pm.expect(uniqueIds.size).to.equal(ids.length);\r",
									"});\r",
									"\r",
									"pm.test(\"Main image URLs are valid\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result.main_image).to.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Store currency is uppercase\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        const currency = result.store.currency;\r",
									"        pm.expect(currency).to.equal(currency.toUpperCase());\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/v2/sales_tracker/stores/:internal_shop_id/competitors/short/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"v2",
								"sales_tracker",
								"stores",
								":internal_shop_id",
								"competitors",
								"short",
								""
							],
							"variable": [
								{
									"key": "internal_shop_id",
									"value": "{{internal_shop_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "JWT token user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRFTOKEN",
								"value": "NbzQ2oKyZvGB4DxnXS2QNyIZfJ5O8h32ikEEgzRQUcNkgSivY0tIJvyIiXqYRb75",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{user_email}}\",\r\n    \"password\":\"{{user_pw}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/auth/token/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "top stores list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has count, next, previous, and results\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('count').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('next').that.satisfies(url => url === \"\" || typeof url === 'string');\r",
									"    pm.expect(jsonData).to.have.property('previous').that.satisfies(url => url === null || typeof url === 'string');\r",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Store object contains valid fields\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        const store = result;\r",
									"        pm.expect(store).to.have.property('custom_domain').that.is.a('string');\r",
									"        pm.expect(store).to.have.property('internal_shop_id').that.is.a('number');\r",
									"        pm.expect(store).to.have.property('favicon').that.is.a('string');\r",
									"        \r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Pagination URLs are valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const urlRegex = /^(https?:\\/\\/[^\\s$.?#].[^\\s]*)?$/; \r",
									"\r",
									"    if (jsonData.next) {\r",
									"        pm.expect(jsonData.next).to.match(urlRegex);\r",
									"    }\r",
									"    if (jsonData.previous) {\r",
									"        pm.expect(jsonData.previous).to.match(urlRegex);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"At least one product has valid title and main_image\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"    const validProducts = results.filter(result => result.title !== \"\" && result.logo !== \"\");\r",
									"\r",
									"    pm.expect(validProducts.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/v2/sales_tracker/top_stores/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"v2",
								"sales_tracker",
								"top_stores",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "store apps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains count and results\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('count').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Count matches the number of results\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results.length).to.equal(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has valid properties\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result).to.have.property('name').that.is.a('string').and.not.empty;\r",
									"        pm.expect(result).to.have.property('average_rating').that.is.a('number').within(0, 5);\r",
									"        pm.expect(result).to.have.property('link').that.is.a('string').and.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"        pm.expect(result).to.have.property('icon').that.is.a('string').and.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"        pm.expect(result).to.have.property('review_count').that.is.a('number').and.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Links and icons are valid URLs\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"    const urlRegex = /^https?:\\/\\/[^\\s]+$/;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result.link).to.match(urlRegex);\r",
									"        pm.expect(result.icon).to.match(urlRegex);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Average ratings are within valid range\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result.average_rating).to.be.within(0, 5);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"App names are unique\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"    const names = results.map(result => result.name);\r",
									"\r",
									"    const uniqueNames = new Set(names);\r",
									"    pm.expect(uniqueNames.size).to.equal(names.length);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Review counts are non-negative integers\", function () {\r",
									"    const results = pm.response.json().results;\r",
									"\r",
									"    results.forEach(result => {\r",
									"        pm.expect(result.review_count).to.be.a('number').and.at.least(0);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/v2/sales_tracker/stores/:internal_shop_id/apps/short/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"v2",
								"sales_tracker",
								"stores",
								":internal_shop_id",
								"apps",
								"short",
								""
							],
							"variable": [
								{
									"key": "internal_shop_id",
									"value": "{{internal_shop_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh token",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"refresh\":\"{{refresh}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/auth/token/refresh/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"token",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/v2/sales_tracker/top_stores/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"v2",
								"sales_tracker",
								"top_stores",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "subscription",
			"item": []
		},
		{
			"name": "university",
			"item": [
				{
					"name": "courses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains count, next, previous, and results\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('next');\r",
									"    pm.expect(jsonData).to.have.property('previous');\r",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each object in results has necessary fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.results.forEach(function(course) {\r",
									"        pm.expect(course).to.have.property('id').that.is.a('string').and.to.not.be.empty;\r",
									"        pm.expect(course).to.have.property('title').that.is.a('string').and.to.not.be.empty;\r",
									"        pm.expect(course).to.have.property('description').that.is.a('string');\r",
									"        pm.expect(course).to.have.property('thumbnail').that.matches(/^https?:\\/\\/[^\\s]+$/);\r",
									"        pm.expect(course).to.have.property('lessons_count').that.is.a('number');\r",
									"        pm.expect(course).to.have.property('completed_lessons_count').that.is.a('number');\r",
									"        pm.expect(course).to.have.property('is_blocked').that.is.a('boolean');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Count matches the number of results\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results.length).to.eql(jsonData.count);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All thumbnail URLs are valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.results.forEach(function(course) {\r",
									"        pm.expect(course.thumbnail).to.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Specific checks for 'Dropshipping On Shopify A-Z' course\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var course = jsonData.results.find(course => course.title === 'Dropshipping On Shopify A-Z');\r",
									"    pm.expect(course).to.exist;\r",
									"    pm.expect(course.description).to.include(\"This course explains every single step\");\r",
									"    pm.expect(course.lessons_count).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/university/courses/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"university",
								"courses",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "courses/chaptes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains count, next, previous, and results\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('count').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('next');\r",
									"    pm.expect(jsonData).to.have.property('previous');\r",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each lesson object in lessons has necessary fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var lessons = jsonData.results[0].lessons;\r",
									"\r",
									"    lessons.forEach(function(lesson) {\r",
									"        pm.expect(lesson).to.have.property('id').that.is.a('string').and.to.not.be.empty;\r",
									"        pm.expect(lesson).to.have.property('chapter_id').that.is.a('string').and.to.not.be.empty;\r",
									"        pm.expect(lesson).to.have.property('title').that.is.a('string').and.to.not.be.empty;\r",
									"        pm.expect(lesson).to.have.property('description').that.is.a('string');\r",
									"        pm.expect(lesson).to.have.property('duration').that.is.a('number');\r",
									"        pm.expect(lesson).to.have.property('video').that.is.a('string').and.to.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"        pm.expect(lesson).to.have.property('thumbnail').that.is.a('string').and.to.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"        pm.expect(lesson).to.have.property('position').that.is.a('number');\r",
									"        pm.expect(lesson).to.have.property('completed').that.is.a('boolean');\r",
									"        pm.expect(lesson).to.have.property('progress').that.is.a('number');\r",
									"        pm.expect(lesson).to.have.property('is_blocked').that.is.a('boolean');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Count matches the number of results\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results.length).to.eql(jsonData.count);\r",
									"});\r",
									"\r",
									"pm.test(\"Specific checks for 'Dropship Tool Tutorials' course\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var course = jsonData.results.find(course => course.title === 'Dropship Tool Tutorials');\r",
									"\r",
									"    pm.expect(course).to.exist;\r",
									"    pm.expect(course.description).to.equal(\"A step-by-step guide to using our tools\");\r",
									"    pm.expect(course.lessons_count).to.be.above(0);\r",
									"    pm.expect(course.completed_lessons_count).to.be.at.least(0);\r",
									"    pm.expect(course.completed).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/university/course-chapters/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"university",
								"course-chapters",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "suppliers",
			"item": [
				{
					"name": "supplier list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"All objects in the array have necessary fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('shipping_time');\r",
									"        pm.expect(item).to.have.property('order_processing_time');\r",
									"        pm.expect(item).to.have.property('orders_shipped');\r",
									"        pm.expect(item).to.have.property('transaction_volume');\r",
									"        pm.expect(item).to.have.property('on_time_delivery_rate');\r",
									"        pm.expect(item).to.have.property('ships_to');\r",
									"        pm.expect(item).to.have.property('avatar');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('is_verified');\r",
									"        pm.expect(item).to.have.property('job_position');\r",
									"        pm.expect(item).to.have.property('description');\r",
									"        pm.expect(item).to.have.property('skype');\r",
									"        pm.expect(item).to.have.property('years_in_business');\r",
									"        pm.expect(item).to.have.property('location');\r",
									"        pm.expect(item).to.have.property('staff');\r",
									"        pm.expect(item).to.have.property('warehouses');\r",
									"        pm.expect(item).to.have.property('floorspace');\r",
									"        pm.expect(item).to.have.property('is_finished');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"IDs and URLs are valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.id).to.be.a('string');\r",
									"        pm.expect(item.id).to.not.be.empty;\r",
									"        pm.expect(item.avatar).to.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"shipping_time and order_processing_time are strings\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.shipping_time).to.be.a('string');\r",
									"        pm.expect(item.order_processing_time).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Transaction volume and orders shipped are valid formats\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.transaction_volume).to.match(/^\\$[0-9,]+\\/year$/);\r",
									"        pm.expect(item.orders_shipped).to.match(/^[0-9,]+(\\+)?$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"on_time_delivery_rate is a percentage\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.on_time_delivery_rate).to.match(/^[0-9]{1,3}(\\.[0-9]+)?%$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"ships_to is an array and contains valid country information\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item.ships_to).to.be.an('array');\r",
									"        item.ships_to.forEach(function(location) {\r",
									"            pm.expect(location).to.have.property('id');\r",
									"            pm.expect(location).to.have.property('city');\r",
									"            pm.expect(location).to.have.property('name');\r",
									"            pm.expect(location).to.have.property('country_code');\r",
									"            pm.expect(location).to.have.property('flag');\r",
									"            \r",
									"            pm.expect(location.id).to.be.a('string').and.to.not.be.empty;\r",
									"            pm.expect(location.name).to.be.a('string').and.to.not.be.empty;\r",
									"            pm.expect(location.country_code).to.be.a('string').and.to.not.be.empty;\r",
									"            pm.expect(location.flag).to.match(/^https?:\\/\\/[^\\s]+$/);\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All 'ships_to' country flags are valid URLs\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        item.ships_to.forEach(function(location) {\r",
									"            pm.expect(location.flag).to.match(/^https?:\\/\\/[^\\s]+\\.svg$/);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/suppliers/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"suppliers",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "portfolio",
			"item": [
				{
					"name": "portfolio collection list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/portfolio/collections/?page=1&page_size=5",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"portfolio",
								"collections",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "portfolio collection list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/portfolio/collections/?page=1&page_size=5",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"portfolio",
								"collections",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "translate",
			"item": [
				{
					"name": "translate",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/generate_transaltes/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"generate_transaltes",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "JWT {{jwt_token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// pm.request.headers.add({\r",
					"//     key: 'aws-cf-cd-environment',\r",
					"//     value: 'staging'\r",
					"// });\r",
					"\r",
					"pm.request.headers.add({\r",
					"    key: 'waf-ignore-limits',\r",
					"    value: 'quhb3c6LJzJ68MkUyWpBG1Z1YHQBRRW682YKQBqPw3ysfBjOcd3CaVU7kK5xebIZ'\r",
					"});\r",
					"\r",
					"var method = pm.request.method;\r",
					"var requestBody = pm.request.body.raw;  // Get the raw request body as a string\r",
					"\r",
					"// Replace dynamic variables in the request body before processing it\r",
					"var replacedBody = pm.variables.replaceIn(requestBody);  // Postman will replace dynamic variables like {{$randomLoremText}}\r",
					"\r",
					"// Function to sanitize the body and escape any characters that may cause issues in JSON\r",
					"function sanitizeString(str) {\r",
					"    return str.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control characters\r",
					"}\r",
					"\r",
					"if ((method === \"POST\" || method === \"PATCH\") && replacedBody) {\r",
					"    // Sanitize the request body before encrypting it\r",
					"    var sanitizedBody = sanitizeString(replacedBody);\r",
					"\r",
					"    var urlsafe = function(string) {\r",
					"        return string.replace(/\\+/g, '-').replace(/\\//g, '_');\r",
					"    };\r",
					"\r",
					"    var timeBytes = function() {\r",
					"        var timeInSeconds = Math.floor(new Date().getTime() / 1000);\r",
					"        var hexTime = timeInSeconds.toString(16).padStart(16, '0');\r",
					"        return CryptoJS.enc.Hex.parse(hexTime);\r",
					"    };\r",
					"\r",
					"    var encryptMessage = function(message, encryptionKey, iv) {\r",
					"        var encrypted = CryptoJS.AES.encrypt(message, encryptionKey, { iv: iv });\r",
					"        return encrypted.ciphertext;\r",
					"    };\r",
					"\r",
					"    var createHmac = function(signingKey, time, iv, cipherText) {\r",
					"        var hmacWords = CryptoJS.enc.Hex.parse('80');\r",
					"        hmacWords = hmacWords.concat(time);\r",
					"        hmacWords = hmacWords.concat(iv);\r",
					"        hmacWords = hmacWords.concat(cipherText);\r",
					"        return CryptoJS.HmacSHA256(hmacWords, signingKey);\r",
					"    };\r",
					"\r",
					"    var createToken = function(secretHex, message) {\r",
					"        var signingKey = CryptoJS.enc.Hex.parse(secretHex.substring(0, 32));\r",
					"        var encryptionKey = CryptoJS.enc.Hex.parse(secretHex.substring(32, 64));\r",
					"\r",
					"        var iv = CryptoJS.lib.WordArray.random(16);\r",
					"        var time = timeBytes();\r",
					"        var cipherText = encryptMessage(message, encryptionKey, iv);\r",
					"        var hmac = createHmac(signingKey, time, iv, cipherText);\r",
					"\r",
					"        var tokenWords = CryptoJS.enc.Hex.parse('80');\r",
					"        tokenWords = tokenWords.concat(time);\r",
					"        tokenWords = tokenWords.concat(iv);\r",
					"        tokenWords = tokenWords.concat(cipherText);\r",
					"        tokenWords = tokenWords.concat(hmac);\r",
					"\r",
					"        return urlsafe(tokenWords.toString(CryptoJS.enc.Base64));\r",
					"    };\r",
					"\r",
					"    var secret64 = pm.collectionVariables.get('FERNET_SECRET_KEY');\r",
					"    var secretWordArray = CryptoJS.enc.Base64.parse(secret64);\r",
					"    var secret = secretWordArray.toString(CryptoJS.enc.Hex);\r",
					"\r",
					"    // Use the sanitized body (with dynamic variables replaced and control characters removed)\r",
					"    var token = createToken(secret, sanitizedBody);\r",
					"    var encryptedBody = JSON.stringify({\"encrypted\": token});\r",
					"    console.log(encryptedBody);\r",
					"\r",
					"    var time = timeBytes();\r",
					"    pm.request.body.update(encryptedBody);  // Update the body with encrypted content\r",
					"\r",
					"    pm.request.headers.add({\r",
					"        key: \"Content-Type\",\r",
					"        value: \"application/json\"\r",
					"    });\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (pm.response.text()){\r",
					"    const response = pm.response.json()\r",
					"    if (response.access != null){\r",
					"        pm.collectionVariables.set(\"jwt_token\", response.access);\r",
					"    }\r",
					"}\r",
					"\r",
					"if (pm.response.text()){\r",
					"    const response = pm.response.json()\r",
					"    if (response.refresh != null){\r",
					"        pm.collectionVariables.set(\"refresh\", response.refresh);\r",
					"    }\r",
					"}\r",
					"\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiUrl",
			"value": "https://test.dropship.dataforest.tech/api"
		},
		{
			"key": "FERNET_SECRET_KEY",
			"value": "uV7HJdHDlqqJN6Fuyl8ulILoGSeccbyCpr6h3wBerpw=",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "STRIPE_SECRET",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh",
			"value": ""
		},
		{
			"key": "preset_id",
			"value": "",
			"type": "string"
		}
	]
}